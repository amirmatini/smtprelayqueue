#!/bin/bash

# SMTP Relay Installer Script
# Version: 1.8.0
# Usage: curl -sSL https://raw.githubusercontent.com/amirmatini/smtprelayqueue/main/install.sh | bash

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
REPO_URL="https://github.com/amirmatini/smtprelayqueue"
RELEASE_VERSION="v1.8.0"
INSTALL_DIR="/opt/smtp-relay"
SERVICE_USER="smtp-relay"
SERVICE_GROUP="smtp-relay"
BINARY_NAME="smtp-relay"
SERVICE_NAME="smtp-relay"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        print_error "This script must be run as root (use sudo)"
        exit 1
    fi
}

# Function to detect OS and architecture
detect_system() {
    print_status "Detecting system information..."
    
    # Detect OS
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if [[ -f /etc/debian_version ]]; then
            OS="debian"
        elif [[ -f /etc/redhat-release ]]; then
            OS="redhat"
        else
            OS="linux"
        fi
    else
        print_error "Unsupported operating system: $OSTYPE. This installer only supports Linux."
        exit 1
    fi
    
    # Detect architecture
    ARCH=$(uname -m)
    case $ARCH in
        x86_64)
            ARCH="amd64"
            ;;
        aarch64|arm64)
            ARCH="arm64"
            ;;
        armv7l)
            ARCH="armv7"
            ;;
        *)
            print_error "Unsupported architecture: $ARCH"
            exit 1
            ;;
    esac
    
    print_success "Detected: $OS $ARCH"
}

# Function to install dependencies
install_dependencies() {
    print_status "Installing dependencies..."
    
    case $OS in
        debian)
            apt-get update
            apt-get install -y curl wget systemd-sysv
            ;;
        redhat)
            yum install -y curl wget systemd
            ;;
        *)
            # Generic Linux
            if command -v apt-get &> /dev/null; then
                apt-get update
                apt-get install -y curl wget systemd-sysv
            elif command -v yum &> /dev/null; then
                yum install -y curl wget systemd
            else
                print_warning "Could not install dependencies automatically. Please ensure curl and wget are installed."
            fi
            ;;
    esac
    
    print_success "Dependencies installed"
}

# Function to create service user
create_service_user() {
    print_status "Creating service user..."
    
    if ! id "$SERVICE_USER" &>/dev/null; then
        useradd -r -s /bin/false -d "$INSTALL_DIR" "$SERVICE_USER"
        print_success "Created service user: $SERVICE_USER"
    else
        print_warning "Service user $SERVICE_USER already exists"
    fi
}

# Function to download and install binary
install_binary() {
    print_status "Downloading SMTP Relay binary..."
    
    # Create installation directory
    mkdir -p "$INSTALL_DIR"
    
    # Download binary
    BINARY_URL="$REPO_URL/releases/download/$RELEASE_VERSION/smtp-relay-$OS-$ARCH"
    print_status "Downloading from: $BINARY_URL"
    
    if curl -L -o "$INSTALL_DIR/$BINARY_NAME" "$BINARY_URL"; then
        chmod +x "$INSTALL_DIR/$BINARY_NAME"
        print_success "Binary downloaded and made executable"
    else
        print_error "Failed to download binary"
        exit 1
    fi
}

# Function to create configuration
create_config() {
    print_status "Creating configuration..."
    
    cat > "$INSTALL_DIR/config.yaml" << 'EOF'
# SMTP Relay Configuration
# Generated by installer

# Incoming SMTP Server Configuration
incoming:
  host: "0.0.0.0"
  port: 2525
  tls:
    enabled: false
    cert_file: ""
    key_file: ""
  auth:
    enabled: false
    username: ""
    password: ""
    method: "plain"
  max_connections: 100
  connection_timeout: "30s"
  idle_timeout: "5m"

# Outgoing SMTP Server Configuration
# IMPORTANT: Update these settings for your SMTP provider
outgoing:
  host: "smtp.gmail.com"
  port: 587
  tls:
    enabled: true
    mode: "starttls"
    skip_verify: false
    cert_file: ""
    key_file: ""
  auth:
    enabled: true
    username: "your-email@gmail.com"
    password: "your-app-password"
    method: "plain"

# Storage Configuration
storage:
  type: "file"
  file:
    path: "./messages"
    max_size: "100MB"
  memory:
    max_messages: 1000

# Logging Configuration
logging:
  level: "info"
  format: "text"
  file: "./logs/smtp-relay.log"

# Rate Limiting
rate_limit:
  enabled: true
  requests_per_minute: 60
  burst: 10

# Retry Configuration
retry:
  enabled: true
  max_attempts: 3
  initial_delay: "5s"
  max_delay: "5m"
  backoff_multiplier: 2.0
  retry_queue_size: 100
  cleanup_failed_after: "24h"
  max_retry_history: 10
  retry_forever: false
EOF

    print_success "Configuration created at $INSTALL_DIR/config.yaml"
    print_warning "Please update the outgoing SMTP settings in the configuration file"
}

# Function to create directories
create_directories() {
    print_status "Creating necessary directories..."
    
    mkdir -p "$INSTALL_DIR/messages"
    mkdir -p "$INSTALL_DIR/logs"
    mkdir -p "$INSTALL_DIR/systemd"
    
    chown -R "$SERVICE_USER:$SERVICE_GROUP" "$INSTALL_DIR"
    
    print_success "Directories created"
}

# Function to create systemd service
create_systemd_service() {
    print_status "Creating systemd service..."
    
    cat > "$INSTALL_DIR/systemd/$SERVICE_NAME.service" << EOF
[Unit]
Description=SMTP Relay Service
After=network.target

[Service]
Type=simple
User=$SERVICE_USER
Group=$SERVICE_GROUP
WorkingDirectory=$INSTALL_DIR
ExecStart=$INSTALL_DIR/$BINARY_NAME
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal
SyslogIdentifier=$SERVICE_NAME

# Security settings
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=$INSTALL_DIR

[Install]
WantedBy=multi-user.target
EOF

    # Copy service file to systemd directory
    cp "$INSTALL_DIR/systemd/$SERVICE_NAME.service" "/etc/systemd/system/"
    
    # Reload systemd and enable service
    systemctl daemon-reload
    systemctl enable "$SERVICE_NAME"
    
    print_success "Systemd service created and enabled"
}

# Function to create startup script
create_startup_script() {
    print_status "Creating startup script..."
    
    cat > "$INSTALL_DIR/start.sh" << 'EOF'
#!/bin/bash
cd "$(dirname "$0")"
./smtp-relay
EOF

    chmod +x "$INSTALL_DIR/start.sh"
    print_success "Startup script created"
}

# Function to create uninstall script
create_uninstall_script() {
    print_status "Creating uninstall script..."
    
    cat > "$INSTALL_DIR/uninstall.sh" << EOF
#!/bin/bash
set -e

echo "Uninstalling SMTP Relay..."

# Stop and disable service
systemctl stop $SERVICE_NAME 2>/dev/null || true
systemctl disable $SERVICE_NAME 2>/dev/null || true
rm -f /etc/systemd/system/$SERVICE_NAME.service
systemctl daemon-reload

# Remove installation directory
rm -rf $INSTALL_DIR

# Remove service user
userdel $SERVICE_USER 2>/dev/null || true

echo "SMTP Relay uninstalled successfully"
EOF

    chmod +x "$INSTALL_DIR/uninstall.sh"
    print_success "Uninstall script created"
}

# Function to display post-installation instructions
show_post_install_instructions() {
    echo
    print_success "SMTP Relay v$RELEASE_VERSION installed successfully!"
    echo
    echo "Installation directory: $INSTALL_DIR"
    echo "Configuration file: $INSTALL_DIR/config.yaml"
    echo "Logs directory: $INSTALL_DIR/logs"
    echo
    print_warning "IMPORTANT: Update the configuration file with your SMTP settings:"
    echo "  nano $INSTALL_DIR/config.yaml"
    echo
    echo "Next steps:"
    echo "1. Edit the configuration file with your SMTP provider settings"
    echo "2. Start the service:"
    echo "   systemctl start $SERVICE_NAME"
    echo "   systemctl status $SERVICE_NAME"
    echo
    echo "To uninstall: $INSTALL_DIR/uninstall.sh"
    echo
    print_success "Installation complete!"
}

# Main installation function
main() {
    echo "=========================================="
    echo "    SMTP Relay Installer v$RELEASE_VERSION"
    echo "=========================================="
    echo
    
    check_root
    detect_system
    install_dependencies
    create_service_user
    install_binary
    create_config
    create_directories
    create_systemd_service
    create_startup_script
    create_uninstall_script
    show_post_install_instructions
}

# Run main function
main "$@" 